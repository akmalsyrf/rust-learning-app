import { Topic, Lesson, Question } from '../types';

// Sample Topics based on Dasar Pemrograman Rust structure
export const sampleTopics: Topic[] = [
  {
    id: 'getting-started',
    title: 'Getting Started',
    description: 'Learn the basics: setup, variables, and your first Rust program',
    order: 1,
    lessons: ['hello-rust', 'build-run', 'variables-types'],
  },
  {
    id: 'control-flow',
    title: 'Control Flow',
    description: 'Master conditionals, loops, and program flow control',
    order: 2,
    lessons: ['conditionals', 'loops', 'functions'],
  },
  {
    id: 'data-structures',
    title: 'Data Structures',
    description: 'Work with arrays, vectors, tuples, and structs',
    order: 3,
    lessons: ['arrays-vectors', 'tuples', 'structs'],
  },
];

// Sample Lessons
export const sampleLessons: Lesson[] = [
  // Getting Started lessons
  {
    id: 'hello-rust',
    title: 'Hello Rust',
    topicId: 'getting-started',
    summary: 'Write your first Rust program and understand the basic syntax. Learn about the main function, printing to console, and compiling Rust code.',
    questions: ['hello-q1', 'hello-q2', 'hello-q3'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.1-program-pertama',
    order: 1,
  },
  {
    id: 'build-run',
    title: 'Build and Run',
    topicId: 'getting-started',
    summary: 'Learn how to compile and run Rust programs using rustc and cargo. Understand the difference between compilation and execution.',
    questions: ['build-q1', 'build-q2', 'build-q3'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.2-build-dan-run-program-rust',
    order: 2,
  },
  {
    id: 'variables-types',
    title: 'Variables and Types',
    topicId: 'getting-started',
    summary: 'Understand Rust variables, mutability, and basic data types including integers, floats, booleans, and characters.',
    questions: ['vars-q1', 'vars-q2', 'vars-q3', 'vars-q4'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.4-variabel',
    order: 3,
  },
  
  // Control Flow lessons
  {
    id: 'conditionals',
    title: 'If, Else If, Else',
    topicId: 'control-flow',
    summary: 'Learn conditional statements in Rust. Understand how to use if, else if, and else for decision making in your programs.',
    questions: ['cond-q1', 'cond-q2', 'cond-q3'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.9-seleksi-kondisi',
    order: 1,
  },
  {
    id: 'loops',
    title: 'Loops: while, loop, for',
    topicId: 'control-flow',
    summary: 'Master different types of loops in Rust: while loops, infinite loops with loop, and for-in loops for iteration.',
    questions: ['loop-q1', 'loop-q2', 'loop-q3', 'loop-q4'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.10-perulangan-while',
    order: 2,
  },
  {
    id: 'functions',
    title: 'Functions',
    topicId: 'control-flow',
    summary: 'Learn how to define and call functions in Rust. Understand parameters, return values, and function scope.',
    questions: ['func-q1', 'func-q2', 'func-q3'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.17-function',
    order: 3,
  },

  // Data Structures lessons  
  {
    id: 'arrays-vectors',
    title: 'Arrays and Vectors',
    topicId: 'data-structures',
    summary: 'Work with collections in Rust. Learn the difference between arrays and vectors, and when to use each.',
    questions: ['arr-q1', 'arr-q2', 'arr-q3'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.13-array',
    order: 1,
  },
  {
    id: 'tuples',
    title: 'Tuples',
    topicId: 'data-structures',
    summary: 'Understand tuples as a way to group values of different types together. Learn tuple syntax and destructuring.',
    questions: ['tuple-q1', 'tuple-q2'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.15-tuple',
    order: 2,
  },
  {
    id: 'structs',
    title: 'Structs',
    topicId: 'data-structures',
    summary: 'Create custom data types using structs. Learn how to define structs, create instances, and access fields.',
    questions: ['struct-q1', 'struct-q2', 'struct-q3'],
    attributionUrl: 'https://dasarpemrogramanrust.novalagung.com/A.23-struct',
    order: 3,
  },
];

// Sample Questions
export const sampleQuestions: Question[] = [
  // Hello Rust questions
  {
    id: 'hello-q1',
    type: 'mcq',
    prompt: 'What is the entry point of a Rust program?',
    choices: ['main()', 'start()', 'begin()', 'run()'],
    correctIndex: 0,
    explanation: 'The main() function is the entry point of every Rust program, just like in many other programming languages.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'hello-q2',
    type: 'predict_output',
    prompt: 'What will this Rust code print?',
    code: 'fn main() {\n    println!("Hello, Rust!");\n}',
    expectedStdout: 'Hello, Rust!',
    explanation: 'The println! macro prints the text followed by a newline to the console.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'hello-q3',
    type: 'fib',
    prompt: 'Complete the code to print "Welcome to Rust": println!("_____ to Rust");',
    acceptableAnswers: ['Welcome', 'welcome'],
    explanation: 'The println! macro is used to print text to the console in Rust.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },

  // Build and Run questions
  {
    id: 'build-q1',
    type: 'mcq',
    prompt: 'Which command is used to compile a single Rust file?',
    choices: ['cargo build', 'rustc filename.rs', 'rust compile', 'cargo run'],
    correctIndex: 1,
    explanation: 'rustc is the Rust compiler that compiles individual .rs files directly.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'build-q2',
    type: 'tf',
    prompt: 'Cargo is used for managing Rust projects and dependencies.',
    answer: true,
    explanation: 'Cargo is Rust\'s build system and package manager, used for project management and dependency handling.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'build-q3',
    type: 'mcq',
    prompt: 'What does "cargo run" do?',
    choices: ['Only compiles the code', 'Only runs the code', 'Compiles and runs the code', 'Downloads dependencies'],
    correctIndex: 2,
    explanation: 'cargo run both compiles your Rust project and runs the resulting executable in one command.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },

  // Variables and Types questions
  {
    id: 'vars-q1',
    type: 'mcq',
    prompt: 'How do you declare a mutable variable in Rust?',
    choices: ['let x = 5;', 'let mut x = 5;', 'var x = 5;', 'mutable x = 5;'],
    correctIndex: 1,
    explanation: 'In Rust, variables are immutable by default. Use "mut" keyword to make them mutable.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'vars-q2',
    type: 'code_fix',
    prompt: 'Fix this code to make it compile:',
    code: 'let x = 5;\nx = 10;\nprintln!("{}", x);',
    choices: [
      'let mut x = 5;\nx = 10;\nprintln!("{}", x);',
      'let x = 5;\nlet x = 10;\nprintln!("{}", x);',
      'const x = 5;\nx = 10;\nprintln!("{}", x);',
      'var x = 5;\nx = 10;\nprintln!("{}", x);'
    ],
    correctIndex: 0,
    explanation: 'To modify a variable after declaration, it must be declared as mutable using the "mut" keyword.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'vars-q3',
    type: 'tf',
    prompt: 'In Rust, variables are mutable by default.',
    answer: false,
    explanation: 'In Rust, variables are immutable by default. You must explicitly use "mut" to make them mutable.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'vars-q4',
    type: 'mcq',
    prompt: 'What is the data type of this variable: let x = 42;',
    choices: ['i32', 'u32', 'f64', 'String'],
    correctIndex: 0,
    explanation: 'When no type is specified, Rust infers integer literals as i32 (32-bit signed integer) by default.',
    topicId: 'getting-started',
    difficulty: 'beginner',
    points: 10,
  },

  // Conditionals questions
  {
    id: 'cond-q1',
    type: 'predict_output',
    prompt: 'What will this code print?',
    code: 'let x = 5;\nif x > 3 {\n    println!("big");\n} else {\n    println!("small");\n}',
    expectedStdout: 'big',
    explanation: 'Since 5 > 3 is true, the first branch executes and prints "big".',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'cond-q2',
    type: 'mcq',
    prompt: 'What is the correct syntax for an if-else if-else statement in Rust?',
    choices: [
      'if condition { } elif condition { } else { }',
      'if condition { } else if condition { } else { }',
      'if (condition) { } elseif (condition) { } else { }',
      'if condition then { } elsif condition then { } else { }'
    ],
    correctIndex: 1,
    explanation: 'Rust uses "else if" syntax, not "elif" or "elseif". Parentheses around conditions are optional.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'cond-q3',
    type: 'tf',
    prompt: 'In Rust, if statements can return values.',
    answer: true,
    explanation: 'Rust if statements are expressions and can return values, making them very powerful for assignment.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },

  // Loops questions
  {
    id: 'loop-q1',
    type: 'mcq',
    prompt: 'Which keyword creates an infinite loop in Rust?',
    choices: ['while true', 'for ever', 'loop', 'infinite'],
    correctIndex: 2,
    explanation: 'The "loop" keyword creates an infinite loop in Rust. It\'s preferred over "while true".',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'loop-q2',
    type: 'predict_output',
    prompt: 'How many times will "hello" be printed?',
    code: 'for i in 0..3 {\n    println!("hello");\n}',
    expectedStdout: 'hello\nhello\nhello',
    explanation: 'The range 0..3 includes 0, 1, and 2 (3 is excluded), so "hello" prints 3 times.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'loop-q3',
    type: 'fib',
    prompt: 'Complete this code to break out of a loop: "_____ ;"',
    acceptableAnswers: ['break', 'break;'],
    explanation: 'The "break" keyword is used to exit a loop early in Rust.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'loop-q4',
    type: 'tf',
    prompt: 'A "continue" statement skips the rest of the current iteration.',
    answer: true,
    explanation: 'The "continue" keyword skips the remaining code in the current iteration and jumps to the next iteration.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },

  // Functions questions
  {
    id: 'func-q1',
    type: 'mcq',
    prompt: 'How do you define a function that returns an integer in Rust?',
    choices: [
      'fn name() -> int { }',
      'function name(): i32 { }',
      'fn name() -> i32 { }',
      'def name() -> i32 { }'
    ],
    correctIndex: 2,
    explanation: 'Rust functions use "fn" keyword and "-> Type" syntax for return types. i32 is the integer type.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'func-q2',
    type: 'code_fix',
    prompt: 'Fix this function to return the sum of two numbers:',
    code: 'fn add(a: i32, b: i32) {\n    a + b\n}',
    choices: [
      'fn add(a: i32, b: i32) -> i32 {\n    a + b\n}',
      'fn add(a: i32, b: i32) {\n    return a + b;\n}',
      'fn add(a: i32, b: i32) -> i32 {\n    return a + b;\n}',
      'fn add(a: i32, b: i32) -> i32 {\n    a + b;\n}'
    ],
    correctIndex: 0,
    explanation: 'Functions that return values need a return type annotation (-> i32). The last expression without semicolon is returned.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'func-q3',
    type: 'tf',
    prompt: 'Function parameters in Rust must have type annotations.',
    answer: true,
    explanation: 'Unlike variables, function parameters must always have explicit type annotations in Rust.',
    topicId: 'control-flow',
    difficulty: 'beginner',
    points: 10,
  },

  // Arrays and Vectors questions
  {
    id: 'arr-q1',
    type: 'mcq',
    prompt: 'How do you create an array of 5 integers in Rust?',
    choices: [
      'let arr = [1, 2, 3, 4, 5];',
      'let arr: [i32; 5] = [1, 2, 3, 4, 5];',
      'let arr = array![1, 2, 3, 4, 5];',
      'Both A and B are correct'
    ],
    correctIndex: 3,
    explanation: 'Both syntaxes work. Rust can infer the array type from the values, or you can explicitly specify it.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'arr-q2',
    type: 'tf',
    prompt: 'Arrays in Rust have a fixed size that must be known at compile time.',
    answer: true,
    explanation: 'Arrays in Rust have a fixed size determined at compile time, unlike vectors which can grow.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'arr-q3',
    type: 'mcq',
    prompt: 'How do you create an empty vector in Rust?',
    choices: [
      'let v = [];',
      'let v = Vec::new();',
      'let v = vector![];',
      'let v = new Vec();'
    ],
    correctIndex: 1,
    explanation: 'Vec::new() creates a new empty vector. You can also use vec![] macro for vector with initial values.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },

  // Tuples questions
  {
    id: 'tuple-q1',
    type: 'mcq',
    prompt: 'How do you access the second element of a tuple in Rust?',
    choices: ['tuple[1]', 'tuple.1', 'tuple(1)', 'tuple->1'],
    correctIndex: 1,
    explanation: 'Tuple elements are accessed using dot notation with the index: tuple.0, tuple.1, etc.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'tuple-q2',
    type: 'predict_output',
    prompt: 'What will this code print?',
    code: 'let point = (3, 4);\nprintln!("{}", point.0);',
    expectedStdout: '3',
    explanation: 'point.0 accesses the first element of the tuple, which is 3.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },

  // Structs questions
  {
    id: 'struct-q1',
    type: 'mcq',
    prompt: 'How do you define a struct in Rust?',
    choices: [
      'struct Person { name: String, age: i32 }',
      'class Person { name: String, age: i32 }',
      'type Person = { name: String, age: i32 }',
      'struct Person(String, i32)'
    ],
    correctIndex: 0,
    explanation: 'Structs are defined using the "struct" keyword followed by field names and types in curly braces.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'struct-q2',
    type: 'tf',
    prompt: 'Struct fields in Rust are private by default.',
    answer: true,
    explanation: 'Struct fields are private by default and need the "pub" keyword to be made public.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },
  {
    id: 'struct-q3',
    type: 'code_fix',
    prompt: 'Fix this code to create a struct instance:',
    code: 'struct Point { x: i32, y: i32 }\nlet p = Point(10, 20);',
    choices: [
      'struct Point { x: i32, y: i32 }\nlet p = Point { x: 10, y: 20 };',
      'struct Point { x: i32, y: i32 }\nlet p = new Point(10, 20);',
      'struct Point { x: i32, y: i32 }\nlet p = Point::new(10, 20);',
      'struct Point { x: i32, y: i32 }\nlet p = Point[10, 20];'
    ],
    correctIndex: 0,
    explanation: 'Struct instances are created using field names in curly braces: Point { x: 10, y: 20 }.',
    topicId: 'data-structures',
    difficulty: 'beginner',
    points: 10,
  },
];

export const sampleData = {
  topics: sampleTopics,
  lessons: sampleLessons,
  questions: sampleQuestions,
};
