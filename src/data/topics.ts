import { Topic } from '../types';

export const topics: Topic[] = [
  {
    id: 'fundamentals',
    title: 'Rust Fundamentals',
    description: 'Learn the basics of Rust programming',
    order: 1,
    lessons: ['hello-world', 'comments', 'variables', 'scalar-types', 'string-literals'],
  },
  {
    id: 'data-types',
    title: 'Data Types & Operations',
    description: 'Understanding Rust data types and operations',
    order: 2,
    lessons: ['constants', 'operators', 'type-alias-casting'],
  },
  {
    id: 'control-structures',
    title: 'Control Structures',
    description: 'Learn about control flow in Rust',
    order: 3,
    lessons: ['conditional-if', 'while-loops', 'loop-break-continue', 'for-loops'],
  },
  {
    id: 'collections',
    title: 'Collections',
    description: 'Arrays, slices, tuples, and vectors',
    order: 4,
    lessons: ['arrays', 'slices', 'tuples', 'vectors'],
  },
  {
    id: 'functions-modules',
    title: 'Functions & Modules',
    description: 'Functions, modules, and code organization',
    order: 5,
    lessons: ['functions', 'module-path', 'package-crate', 'modules', 'inline-modules', 'module-scope', 'module-access'],
  },
  {
    id: 'structs-enums',
    title: 'Structs & Enums',
    description: 'Custom data types and pattern matching',
    order: 6,
    lessons: ['structs', 'struct-update', 'tuple-structs', 'unit-structs', 'struct-methods', 'enums', 'enum-methods'],
  },
  {
    id: 'module-system-advanced',
    title: 'Advanced Module System',
    description: 'Advanced module organization and use statements',
    order: 7,
    lessons: ['use-statements', 'nested-use', 'use-external-crates'],
  },
  {
    id: 'memory-management',
    title: 'Memory Management',
    description: 'Ownership, borrowing, and references',
    order: 8,
    lessons: ['ownership', 'borrowing-ref', 'mutable-ref', 'ref-dangling-ref', 'slice-references'],
  },
  {
    id: 'traits-generics',
    title: 'Traits & Generics',
    description: 'Traits, generics, and lifetimes',
    order: 9,
    lessons: ['traits', 'trait-default', 'trait-parameter', 'trait-return', 'trait-bound', 'trait-conditionally', 'trait-blanket', 'lifetimes', 'lifetime-annotation'],
  },
  {
    id: 'advanced-types',
    title: 'Advanced Types',
    description: 'Advanced type system features',
    order: 10,
    lessons: ['advanced-functions', 'newtype-pattern', 'type-alias', 'never-type', 'dynamically-sized'],
  },
  {
    id: 'strings-advanced',
    title: 'Advanced Strings',
    description: 'String manipulation and formatting',
    order: 11,
    lessons: ['string-slice', 'string-literal', 'raw-string'],
  },
  {
    id: 'functional-programming',
    title: 'Functional Programming',
    description: 'Closures, iterators, and functional patterns',
    order: 12,
    lessons: ['closures', 'closure-traits', 'iterators', 'iterator-adaptors'],
  },
  {
    id: 'system-programming',
    title: 'System Programming',
    description: 'Unsafe code, testing, and attributes',
    order: 13,
    lessons: ['unsafe', 'testing', 'attributes'],
  },
  {
    id: 'advanced-concepts',
    title: 'Advanced Concepts',
    description: 'Smart pointers, concurrency, and advanced patterns',
    order: 14,
    lessons: ['smart-pointers', 'concurrency', 'async-await'],
  },
  {
    id: 'error-handling',
    title: 'Error Handling',
    description: 'Comprehensive error handling in Rust',
    order: 15,
    lessons: ['panic', 'result-type', 'recoverable-errors'],
  },
];
